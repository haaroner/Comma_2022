#include "motor.h"

#define CHANNEL1 1
#define CHANNEL2 2
#define CHANNEL3 3
#define CHANNEL4 4

#define tim1 81
#define tim2 82
#define tim3 83
#define tim4 84
#define tim5 85
#define tim7 87
#define tim8 88
#define tim9 89
#define tim10 810
#define tim11 811
#define tim12 812
#define tim13 813
#define tim14 814

Motor::Motor(pin& p1, pin& p2): _p1(p1), _p2(p2)
{
  _TIMx1 = _p1.getTimerx();
  _TIMx2 = _p2.getTimerx();
  
  _channel1 = _p1.getChannel();
  _channel2 = _p2.getChannel();
  if(_TIMx1 != NULL && _TIMx2 != NULL && _channel1 != NULL && _channel2 != NULL)
  {
    if(_TIMx1 == TIM1) {_RCC_TIMx1 = RCC_APB2ENR_TIM1EN;}
    else if(_TIMx1 == TIM2) {_RCC_TIMx1 = RCC_APB1ENR_TIM2EN;}
    else if(_TIMx1 == TIM3) {_RCC_TIMx1 = RCC_APB1ENR_TIM3EN;}
    else if(_TIMx1 == TIM4) {_RCC_TIMx1 = RCC_APB1ENR_TIM4EN;}
    else if(_TIMx1 == TIM5) {_RCC_TIMx1 = RCC_APB1ENR_TIM5EN;}
    //else if(_tim1 == tim6) {_TIMx1 = TIM6; _RCC_TIMx1 = RCC_APB1ENR_TIM6EN;}
    else if(_TIMx1 == TIM7) {_RCC_TIMx1 = RCC_APB1ENR_TIM7EN;}
    else if(_TIMx1 == TIM8) {_RCC_TIMx1 = RCC_APB2ENR_TIM8EN;}
    else if(_TIMx1 == TIM9) {_RCC_TIMx1 = RCC_APB2ENR_TIM9EN;}
    else if(_TIMx1 == TIM10) {_RCC_TIMx1 = RCC_APB2ENR_TIM10EN;}
    else if(_TIMx1 == TIM11) {_RCC_TIMx1 = RCC_APB2ENR_TIM11EN;}
    else if(_TIMx1 == TIM12) {_RCC_TIMx1 = RCC_APB1ENR_TIM12EN;}
    else if(_TIMx1 == TIM13) {_RCC_TIMx1 = RCC_APB1ENR_TIM13EN;}
    else if(_TIMx1 == TIM14) {_RCC_TIMx1 = RCC_APB1ENR_TIM14EN;}
    
    if(_TIMx2 == TIM1) {_RCC_TIMx2 = RCC_APB2ENR_TIM1EN;}
    else if(_TIMx2 == TIM2) {_RCC_TIMx2 = RCC_APB1ENR_TIM2EN;}
    else if(_TIMx2 == TIM3) {_RCC_TIMx2 = RCC_APB1ENR_TIM3EN;}
    else if(_TIMx2 == TIM4) {_RCC_TIMx2 = RCC_APB1ENR_TIM4EN;}
    else if(_TIMx2 == TIM5) {_RCC_TIMx2 = RCC_APB1ENR_TIM5EN;}
    //else if(_tim2 == tim6) {_TIMx2 = TIM6; _RCC_TIMx2 = RCC_APB1ENR_TIM6EN;}
    else if(_TIMx2 == TIM7) {_RCC_TIMx2 = RCC_APB1ENR_TIM7EN;}
    else if(_TIMx2 == TIM8) {_RCC_TIMx2 = RCC_APB2ENR_TIM8EN;}
    else if(_TIMx2 == TIM9) {_RCC_TIMx2 = RCC_APB2ENR_TIM9EN;}
    else if(_TIMx2 == TIM10) {_RCC_TIMx2 = RCC_APB2ENR_TIM10EN;}
    else if(_TIMx2 == TIM11) {_RCC_TIMx2 = RCC_APB2ENR_TIM11EN;}
    else if(_TIMx2 == TIM12) {_RCC_TIMx2 = RCC_APB1ENR_TIM12EN;}
    else if(_TIMx2 == TIM13) {_RCC_TIMx2 = RCC_APB1ENR_TIM13EN;}
    else if(_TIMx2 == TIM14) {_RCC_TIMx2 = RCC_APB1ENR_TIM14EN;}
    
    _p1.pwmInit(_RCC_TIMx1, 2, 4096, 0, _channel1, _TIMx1, 1);	
    _p2.pwmInit(_RCC_TIMx2, 2, 4096, 0, _channel2, _TIMx2, 1);
  }
}

void Motor::motorMove(double pupower)
{
  //if(abs(double(pupower)) < 13)
  //{
    //if(pupower > 0)
      //pupower = 1/((13 - pupower) * 0.0002442);
    //else
      //pupower = -1 / ((13 - abs(double(pupower))) * 0.0002442);
  //}
  //else
  //{
    //pupower = 4095 * (abs(double(pupower)) / pupower);
  //}
  
	if(pupower <= -1)
	{
		pupower = -4096 - pupower;
		if(pupower < -4095)
		{
			pupower = -4095;
		}
		_p1.pwm(pupower * -1);
		_p2.pwm(4095);
	}
	else
	{
		pupower = 4096 - pupower;
		if(pupower > 4095)
		{
			pupower = 4095;
		}
		_p1.pwm(4095);
		_p2.pwm(pupower);
	}
}

void Motor::blockMotor(int32_t pupower)
{
	_p1.pwm(pupower);
	_p2.pwm(pupower);
}
